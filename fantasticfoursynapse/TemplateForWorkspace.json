{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "fantasticfoursynapse"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"Salesforce1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'Salesforce1'"
		},
		"Salesforce1_securityToken": {
			"type": "secureString",
			"metadata": "Secure string for 'securityToken' of 'Salesforce1'"
		},
		"SqlServer1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServer1'"
		},
		"fantasticfoursynapse-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'fantasticfoursynapse-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:fantasticfoursynapse.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://fantasticfouraccount.dfs.core.windows.net/"
		},
		"Salesforce1_properties_typeProperties_environmentUrl": {
			"type": "string",
			"defaultValue": "https://login.salesforce.com"
		},
		"Salesforce1_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "fantasticfour@challange.com"
		},
		"fantasticfoursynapse-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://fantasticfouraccount.dfs.core.windows.net"
		},
		"Test_trigger_properties_FailingPipeline_LogicApps_parameters_receiver": {
			"type": "string",
			"defaultValue": "pranavblog2000@gmail.com"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Fail_Test')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "gCGHJAV",
									"wildcardFileName": "*.cfv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ff_sf_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "FailureDetails",
						"type": "WebActivity",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://prod-22.northcentralus.logic.azure.com:443/workflows/1edd4825b600473d889eca834fece4fe/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=0dhq3gORyWMhMjNQCggVCUSjPFLQi1OyPWTftUMDqs8",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"body": {
								"value": "{\n    \"message\" : \"This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.\",\n    \"dataFactoryName\" : \"@{pipeline().DataFactory}\", \n    \"pipelineName\" : \"@{pipeline().Pipeline}\", \n    \"receiver\" : \"@{activity('Lookup1').output.errors[0].Message}\"\n   }",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"receiver": {
						"type": "string",
						"defaultValue": "pranavblog2000@gmail.com"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ff_sf_data')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Fail_Test_1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "FailureDetails",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://prod-22.northcentralus.logic.azure.com:443/workflows/1edd4825b600473d889eca834fece4fe/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=0dhq3gORyWMhMjNQCggVCUSjPFLQi1OyPWTftUMDqs8",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"body": {
								"value": "{\n    \"message\" : \"This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.\",\n    \"dataFactoryName\" : \"@{pipeline().DataFactory}\", \n    \"pipelineName\" : \"@{pipeline().Pipeline}\",\n    \"activityName\" : \"@{pipeline().TriggerName}\",\n    \"receiver\" : \"@{activity('Copy data1').output.errors[0].Message}\"\n   }",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "sad",
									"wildcardFileName": "fas",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "pq_SA",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ff_sf_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"receiver": {
						"type": "string",
						"defaultValue": "pranavblog2000@gmail.com"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/datasets/pq_SA')]",
				"[concat(variables('workspaceId'), '/datasets/ff_sf_data')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FailingPipeline2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "FailureDetails",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://prod-22.northcentralus.logic.azure.com:443/workflows/1edd4825b600473d889eca834fece4fe/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=0dhq3gORyWMhMjNQCggVCUSjPFLQi1OyPWTftUMDqs8",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"body": {
								"value": "{\n    \"message\" : \"This is a custom dynamic message from your pipeline - @{pipeline().Pipeline}.\",\n    \"receiver\" : \"@{activity('Copy data1').output.errors[0].Message}\"\n   }",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data2",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "sad",
									"wildcardFileName": "fas",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "pq_SA",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ff_sf_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data2",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "sad",
									"wildcardFileName": "fas",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "pq_SA",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ff_sf_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"receiver": {
						"type": "string",
						"defaultValue": "pranavblog2000@gmail.com"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/datasets/pq_SA')]",
				"[concat(variables('workspaceId'), '/datasets/ff_sf_data')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FailingPipeline_LogicApps')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "FailureDetails",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://prod-22.northcentralus.logic.azure.com:443/workflows/1edd4825b600473d889eca834fece4fe/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=0dhq3gORyWMhMjNQCggVCUSjPFLQi1OyPWTftUMDqs8",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"body": {
								"value": "{\n    \"message\" : \"This is a custom dynamic message from your pipeline - @{pipeline().Pipeline}.\",\n    \"receiver\" : \"@{activity('Copy data1').output.errors[0].Message}\"\n   }",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data2",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "sad",
									"wildcardFileName": "fas",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "pq_SA",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ff_sf_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data2",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "sad",
									"wildcardFileName": "fas",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "pq_SA",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ff_sf_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"receiver": {
						"type": "string",
						"defaultValue": "pranavblog2000@gmail.com"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/datasets/pq_SA')]",
				"[concat(variables('workspaceId'), '/datasets/ff_sf_data')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ff_sf_to_synapse')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "copy_sf_to_syn",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SalesforceSource",
								"readBehavior": "query"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Id",
											"type": "String"
										},
										"sink": {
											"name": "Id",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "OwnerId",
											"type": "String"
										},
										"sink": {
											"name": "OwnerId",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "IsDeleted",
											"type": "Boolean"
										},
										"sink": {
											"name": "IsDeleted",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										}
									},
									{
										"source": {
											"name": "Name",
											"type": "String"
										},
										"sink": {
											"name": "Name",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "CreatedDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "CreatedDate",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "CreatedById",
											"type": "String"
										},
										"sink": {
											"name": "CreatedById",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "LastModifiedDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "LastModifiedDate",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "LastModifiedById",
											"type": "String"
										},
										"sink": {
											"name": "LastModifiedById",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "SystemModstamp",
											"type": "DateTime"
										},
										"sink": {
											"name": "SystemModstamp",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "LastActivityDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "LastActivityDate",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "LastViewedDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "LastViewedDate",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "LastReferencedDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "LastReferencedDate",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "Overall_Rating__c",
											"type": "String"
										},
										"sink": {
											"name": "Overall_Rating__c",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Test_Value__c",
											"type": "String"
										},
										"sink": {
											"name": "Test_Value__c",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Email__c",
											"type": "String"
										},
										"sink": {
											"name": "Email__c",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Feedback__c",
											"type": "String"
										},
										"sink": {
											"name": "Feedback__c",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Knowledge_Rating__c",
											"type": "Decimal"
										},
										"sink": {
											"name": "Knowledge_Rating__c",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "Friendliness_Rating__c",
											"type": "Decimal"
										},
										"sink": {
											"name": "Friendliness_Rating__c",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "Guidance_Rating__c",
											"type": "Decimal"
										},
										"sink": {
											"name": "Guidance_Rating__c",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "Efficiency_Rating__c",
											"type": "Decimal"
										},
										"sink": {
											"name": "Efficiency_Rating__c",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "Satisfaction_Rating__c",
											"type": "String"
										},
										"sink": {
											"name": "Satisfaction_Rating__c",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Feedback2__c",
											"type": "String"
										},
										"sink": {
											"name": "Feedback2__c",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Feedback3__c",
											"type": "String"
										},
										"sink": {
											"name": "Feedback3__c",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Sentiment_Score__c",
											"type": "Decimal"
										},
										"sink": {
											"name": "Sentiment_Score__c",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "Phone__c",
											"type": "String"
										},
										"sink": {
											"name": "Phone__c",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "First_Name__c",
											"type": "String"
										},
										"sink": {
											"name": "First_Name__c",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Last_Name__c",
											"type": "String"
										},
										"sink": {
											"name": "Last_Name__c",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "CreatedDate_D__c",
											"type": "String"
										},
										"sink": {
											"name": "CreatedDate_D__c",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "sf_feedbackCollector",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ff_sf_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "nbk_sentiment_analysis",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "copy_sf_to_syn",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "nbk_SentimentAnalysis",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "ffSparkPool",
								"type": "BigDataPoolReference"
							},
							"conf": {
								"spark.dynamicAllocation.enabled": true
							}
						}
					},
					{
						"name": "copy_syn_to_sf",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "nbk_sentiment_analysis",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "SalesforceSink",
								"writeBatchSize": 5000,
								"writeBehavior": "upsert",
								"externalIdFieldName": "Id",
								"ignoreNullValues": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Id",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Sentiment_Score",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "Sentiment_Score__c",
											"type": "Decimal"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "pq_SA",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "sf_feedbackCollector",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-10-10T17:35:52Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/sf_feedbackCollector')]",
				"[concat(variables('workspaceId'), '/datasets/ff_sf_data')]",
				"[concat(variables('workspaceId'), '/notebooks/nbk_SentimentAnalysis')]",
				"[concat(variables('workspaceId'), '/bigDataPools/ffSparkPool')]",
				"[concat(variables('workspaceId'), '/datasets/pq_SA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/forEach')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.itemName",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"fileListPath": {
													"value": "@item()",
													"type": "Expression"
												},
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "forEachInput",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "Binary1",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "inputfolder",
								"value": "input"
							}
						],
						"typeProperties": {
							"dataset": {
								"referenceName": "forEachInput",
								"type": "DatasetReference",
								"parameters": {
									"SourceFolder": "input"
								}
							},
							"fieldList": [
								"itemName"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"inputfolder": {
						"type": "string",
						"defaultValue": "input"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/forEachInput')]",
				"[concat(variables('workspaceId'), '/datasets/Binary1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/for_each')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "forEachInput",
								"type": "DatasetReference",
								"parameters": {
									"SourceFolder": {
										"value": "@pipeline().parameters.SourceFolder",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFolderPath": {
													"value": "@pipeline().parameters.SourceFolder",
													"type": "Expression"
												},
												"wildcardFileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "forEachInput",
											"type": "DatasetReference",
											"parameters": {
												"SourceFolder": {
													"value": "@pipeline().parameters.SourceFolder",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Binary1",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SourceFolder": {
						"type": "string",
						"defaultValue": "input"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/forEachInput')]",
				"[concat(variables('workspaceId'), '/datasets/Binary1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Binary1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "fantasticfoursynapse-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "output",
						"fileSystem": "fantasticfourfilesystem"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/fantasticfoursynapse-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Binary2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "fantasticfoursynapse-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "input",
						"fileSystem": "fantasticfourfilesystem"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/fantasticfoursynapse-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Binary3')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "input",
							"type": "Expression"
						},
						"fileSystem": "fantasticfourfilesystem"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ff_sf_data')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "fantasticfoursynapse-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Feedback_Collector__c.parquet",
						"folderPath": "sfinput",
						"fileSystem": "fantasticfourfilesystem"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "Id",
						"type": "UTF8"
					},
					{
						"name": "Name",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/fantasticfoursynapse-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/forEachInput')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "fantasticfoursynapse-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "input"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().SourceFolder",
							"type": "Expression"
						},
						"fileSystem": "fantasticfourfilesystem"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/fantasticfoursynapse-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pq_SA')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "fantasticfoursynapse-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "SentimentAnalysisScore.parquet",
						"folderPath": "synoutput",
						"fileSystem": "fantasticfourfilesystem"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/fantasticfoursynapse-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sf_feedbackCollector')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Salesforce1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SalesforceObject",
				"schema": [],
				"typeProperties": {
					"objectApiName": "Feedback_Collector__c"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Salesforce1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Salesforce1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "Salesforce",
				"typeProperties": {
					"environmentUrl": "[parameters('Salesforce1_properties_typeProperties_environmentUrl')]",
					"username": "[parameters('Salesforce1_properties_typeProperties_username')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('Salesforce1_password')]"
					},
					"securityToken": {
						"type": "SecureString",
						"value": "[parameters('Salesforce1_securityToken')]"
					},
					"apiVersion": "56.0"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SqlServer1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DbName": {
						"type": "String",
						"defaultValue": "localhost"
					},
					"DbServerName": {
						"type": "String",
						"defaultValue": "Prasad_OnPrem"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServer1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "IntegrationRuntime1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/IntegrationRuntime1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/fantasticfoursynapse-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('fantasticfoursynapse-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/fantasticfoursynapse-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('fantasticfoursynapse-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Schedule_test')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Fail_Test",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 1,
						"startTime": "2024-08-06T18:13:00",
						"endTime": "2024-09-01T18:13:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Fail_Test')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Test_trigger')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "FailingPipeline_LogicApps",
							"type": "PipelineReference"
						},
						"parameters": {
							"receiver": "[parameters('Test_trigger_properties_FailingPipeline_LogicApps_parameters_receiver')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 15,
						"startTime": "2024-09-02T06:39:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/FailingPipeline_LogicApps')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IntegrationRuntime1')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Delta Lake')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "ffSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "566e2aa2-c613-4c7c-b9ac-48360ea9c3e3"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/23731aa3-4b0a-4570-b586-3428fd40a659/resourceGroups/FantasticFour/providers/Microsoft.Synapse/workspaces/fantasticfoursynapse/bigDataPools/ffSparkPool",
						"name": "ffSparkPool",
						"type": "Spark",
						"endpoint": "https://fantasticfoursynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ffSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://fantasticfourfilesystem@fantasticfouraccount.dfs.core.windows.net/sfinput/Feedback_Collector__c.parquet', format='parquet')\r\n",
							"\r\n",
							"\r\n",
							"# Save the dataframe as a delta table\r\n",
							"delta_table_path = \"/delta/myDeltaLakeData\"\r\n",
							"df.write.format(\"delta\").save(delta_table_path)"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%sql\r\n",
							"\r\n",
							"CREATE TABLE ManagedSalesOrders\r\n",
							"(\r\n",
							"    Orderid INT NOT NULL,\r\n",
							"    OrderDate TIMESTAMP NOT NULL,\r\n",
							"    CustomerName STRING,\r\n",
							"    SalesTotal FLOAT NOT NULL\r\n",
							")\r\n",
							"USING DELTA"
						]
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ff_sf_data')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "ffSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "36556f68-33a8-47ef-908d-8cddb8b31fc2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"303cb8ea-8286-4c1b-ab47-ea4ce994391d": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "a005h00000vQH4qAAG",
												"1": "0055h000009pgcZAAQ",
												"2": "false",
												"3": "TEst",
												"4": "2023-09-29 17:54:28",
												"5": "0055h000009pgcZAAQ",
												"6": "2023-09-29 17:54:28",
												"7": "0055h000009pgcZAAQ",
												"8": "2023-09-29 17:54:28",
												"10": "2023-09-30 16:29:41",
												"11": "2023-09-30 16:29:41",
												"12": "Excellent"
											},
											{
												"0": "a005h00000vQH4rAAG",
												"1": "0055h000009pgcZAAQ",
												"2": "false",
												"3": "Test",
												"4": "2023-09-29 18:02:45",
												"5": "0055h000009pgcZAAQ",
												"6": "2023-09-29 18:02:45",
												"7": "0055h000009pgcZAAQ",
												"8": "2023-09-29 18:02:45",
												"10": "2023-09-29 18:03:07",
												"11": "2023-09-29 18:03:07",
												"14": "meenakshi.telu@gmail.com",
												"15": "Good"
											},
											{
												"0": "a005h00000vQH50AAG",
												"1": "0055h000009pgcZAAQ",
												"2": "false",
												"3": "Test",
												"4": "2023-09-29 18:02:33",
												"5": "0055h000009pgcZAAQ",
												"6": "2023-09-29 18:02:33",
												"7": "0055h000009pgcZAAQ",
												"8": "2023-09-29 18:02:33",
												"10": "2023-09-29 18:02:33",
												"11": "2023-09-29 18:02:33",
												"14": "meenakshi.telu@gmail.com",
												"15": "Good"
											},
											{
												"0": "a005h00000vQH55AAG",
												"1": "0055h000009pgcZAAQ",
												"2": "false",
												"3": "Meenakshi Test 4",
												"4": "2023-09-29 18:48:05",
												"5": "0055h000009pgcZAAQ",
												"6": "2023-09-29 18:48:05",
												"7": "0055h000009pgcZAAQ",
												"8": "2023-09-29 18:48:05",
												"10": "2023-09-29 19:05:38",
												"11": "2023-09-29 19:05:38",
												"15": "Cool"
											},
											{
												"0": "a005h00000vQkhsAAC",
												"1": "0055h000009pgcZAAQ",
												"2": "false",
												"3": "Meenakshi",
												"4": "2023-09-30 16:35:39",
												"5": "0055h000009pgcZAAQ",
												"6": "2023-09-30 16:35:39",
												"7": "0055h000009pgcZAAQ",
												"8": "2023-09-30 16:35:39",
												"10": "2023-09-30 16:35:39",
												"11": "2023-09-30 16:35:39",
												"14": "meenakshi.telu@gmail.com"
											},
											{
												"0": "a005h00000w6FHUAA2",
												"1": "0055h000009pgcZAAQ",
												"2": "false",
												"3": "m2",
												"4": "2023-10-08 12:03:16",
												"5": "0055h000009plaCAAQ",
												"6": "2023-10-08 12:03:16",
												"7": "0055h000009plaCAAQ",
												"8": "2023-10-08 12:03:16",
												"16": "5.000000000000000000",
												"19": "5.000000000000000000"
											},
											{
												"0": "a005h00000w6FHeAAM",
												"1": "0055h000009pgcZAAQ",
												"2": "false",
												"3": "Bv",
												"4": "2023-10-08 12:05:23",
												"5": "0055h000009plaCAAQ",
												"6": "2023-10-08 12:05:23",
												"7": "0055h000009plaCAAQ",
												"8": "2023-10-08 12:05:23",
												"16": "5.000000000000000000",
												"18": "5.000000000000000000",
												"19": "5.000000000000000000"
											},
											{
												"0": "a005h00000w6FGHAA2",
												"1": "0055h000009pgcZAAQ",
												"2": "false",
												"3": "A6",
												"4": "2023-10-08 11:30:25",
												"5": "0055h000009plaCAAQ",
												"6": "2023-10-08 11:30:25",
												"7": "0055h000009plaCAAQ",
												"8": "2023-10-08 11:30:25",
												"10": "2023-10-08 15:02:57",
												"11": "2023-10-08 15:02:57"
											},
											{
												"0": "a005h00000w6FHPAA2",
												"1": "0055h000009pgcZAAQ",
												"2": "false",
												"3": "a005h00000w6FHP",
												"4": "2023-10-08 12:01:29",
												"5": "0055h000009plaCAAQ",
												"6": "2023-10-08 12:01:29",
												"7": "0055h000009plaCAAQ",
												"8": "2023-10-08 12:01:29",
												"16": "5.000000000000000000",
												"17": "5.000000000000000000",
												"19": "5.000000000000000000"
											},
											{
												"0": "a005h00000w6FEzAAM",
												"1": "0055h000009pgcZAAQ",
												"2": "false",
												"3": "Ayaan2",
												"4": "2023-10-08 11:15:49",
												"5": "0055h000009plaCAAQ",
												"6": "2023-10-08 11:15:49",
												"7": "0055h000009plaCAAQ",
												"8": "2023-10-08 11:15:49",
												"10": "2023-10-08 11:16:02",
												"11": "2023-10-08 11:16:02",
												"16": "5.000000000000000000"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "Id",
												"type": "string"
											},
											{
												"key": "1",
												"name": "OwnerId",
												"type": "string"
											},
											{
												"key": "2",
												"name": "IsDeleted",
												"type": "boolean"
											},
											{
												"key": "3",
												"name": "Name",
												"type": "string"
											},
											{
												"key": "4",
												"name": "CreatedDate",
												"type": "timestamp"
											},
											{
												"key": "5",
												"name": "CreatedById",
												"type": "string"
											},
											{
												"key": "6",
												"name": "LastModifiedDate",
												"type": "timestamp"
											},
											{
												"key": "7",
												"name": "LastModifiedById",
												"type": "string"
											},
											{
												"key": "8",
												"name": "SystemModstamp",
												"type": "timestamp"
											},
											{
												"key": "9",
												"name": "LastActivityDate",
												"type": "timestamp"
											},
											{
												"key": "10",
												"name": "LastViewedDate",
												"type": "timestamp"
											},
											{
												"key": "11",
												"name": "LastReferencedDate",
												"type": "timestamp"
											},
											{
												"key": "12",
												"name": "Overall_Rating__c",
												"type": "string"
											},
											{
												"key": "13",
												"name": "Test_Value__c",
												"type": "string"
											},
											{
												"key": "14",
												"name": "Email__c",
												"type": "string"
											},
											{
												"key": "15",
												"name": "Feedback__c",
												"type": "string"
											},
											{
												"key": "16",
												"name": "Knowledge_Rating__c",
												"type": "decimal"
											},
											{
												"key": "17",
												"name": "Friendliness_Rating__c",
												"type": "decimal"
											},
											{
												"key": "18",
												"name": "Guidance_Rating__c",
												"type": "decimal"
											},
											{
												"key": "19",
												"name": "Efficiency_Rating__c",
												"type": "decimal"
											},
											{
												"key": "20",
												"name": "Satisfaction_Rating__c",
												"type": "string"
											},
											{
												"key": "21",
												"name": "Feedback2__c",
												"type": "string"
											},
											{
												"key": "22",
												"name": "Feedback3__c",
												"type": "string"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"0"
											],
											"seriesFieldKeys": [
												"16"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/23731aa3-4b0a-4570-b586-3428fd40a659/resourceGroups/FantasticFour/providers/Microsoft.Synapse/workspaces/fantasticfoursynapse/bigDataPools/ffSparkPool",
						"name": "ffSparkPool",
						"type": "Spark",
						"endpoint": "https://fantasticfoursynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ffSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://fantasticfourfilesystem@fantasticfouraccount.dfs.core.windows.net/sfinput/Feedback_Collector__c.parquet', format='parquet')\r\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 1
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nbk_SentimentAnalysis')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "ffSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 1,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "1",
						"spark.autotune.trackingId": "6b59865d-815e-4eb5-9692-2b436e0291c2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/23731aa3-4b0a-4570-b586-3428fd40a659/resourceGroups/FantasticFour/providers/Microsoft.Synapse/workspaces/fantasticfoursynapse/bigDataPools/ffSparkPool",
						"name": "ffSparkPool",
						"type": "Spark",
						"endpoint": "https://fantasticfoursynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ffSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\n",
							"from nltk.tokenize import RegexpTokenizer  \n",
							"from nltk.stem.porter import PorterStemmer  \n",
							"from nltk.corpus import stopwords\n",
							"import nltk  \n",
							"from sklearn.feature_extraction.text import CountVectorizer  \n",
							"from sklearn.naive_bayes import MultinomialNB  \n",
							"import pyspark \n",
							"from pyspark.sql import SparkSession \n",
							"import pandas as pd\n",
							"\n",
							"res=[]\n",
							"\n",
							"df = spark.read.load('abfss://fantasticfourfilesystem@fantasticfouraccount.dfs.core.windows.net/sfinput/Feedback_Collector__c.parquet', format='parquet')\n",
							"df.createOrReplaceTempView(\"SF_Src\")\n",
							"df1 = spark.sql(\"Select Id,Feedback__c,Feedback2__c,Feedback3__c,Knowledge_Rating__c,Friendliness_Rating__c,Guidance_Rating__c,Efficiency_Rating__c,Satisfaction_Rating__c FROM SF_Src WHERE Sentiment_Score__c IS NULL\")\n",
							"df_collect=df1.collect()\n",
							"sf_data=[]\n",
							"test_set=[]\n",
							"rating_data=[]\n",
							"for df_row in df_collect:\n",
							"    feedback=(df_row[\"Feedback__c\"] or '')+ \" \"+(df_row[\"Feedback2__c\"] or '')+\" \"+(df_row[\"Feedback3__c\"] or '')\n",
							"    rating = (df_row[\"Knowledge_Rating__c\"] or 0) + (df_row[\"Friendliness_Rating__c\"] or 0) + (df_row[\"Guidance_Rating__c\"] or 0) + (df_row[\"Efficiency_Rating__c\"] or 0)\n",
							"    if rating/4 < 2.5:\n",
							"        rating = -1\n",
							"    elif rating/4 > 3.5:\n",
							"        rating = 1\n",
							"    else:\n",
							"        rating=0\n",
							"    rating_data.append(rating)\n",
							"    sf_id=df_row[\"Id\"] \n",
							"    sf_data_row=[sf_id,feedback]\n",
							"    sf_data.append(sf_data_row)\n",
							"\n",
							"for x in sf_data:\n",
							"    test_set.append(x[1])\n",
							"\n",
							"def getCleanedText(text):  \n",
							"  texttext=text.lower()  \n",
							"  #tokenize  \n",
							"  tokens=tokenizer.tokenize(text)  \n",
							"  new_tokens=[token for token in tokens if token not in en_stopwords]  \n",
							"  stemmed_tokens=[ps.stem(tokens) for tokens in new_tokens]  \n",
							"  clean_text=\" \".join(stemmed_tokens)  \n",
							"  return clean_text   \n",
							"\n",
							"\n",
							"training_set=[\"the product was okay\",\n",
							"              \"the product was fine\",\n",
							"              \"I had a great time using the product\",\n",
							"              \"you should throw this in the dustbin, it is useless\",\n",
							"              \"it was amazing, look forward to new features on this\",\n",
							"              \"The service was really bad\",\n",
							"              \"Worst product ever\",\n",
							"              \"Very very bad product, pathetic\",\n",
							"              \"Very satisfied with the product, very smooth experience\"]\n",
							"training_set_res=[0,0,1,-1,1,-1,-1,-1,1]\n",
							"\n",
							"if(len(sf_data)!=0):\n",
							"    nltk.download('stopwords')\n",
							"    tokenizer=RegexpTokenizer(r'\\w+')\n",
							"    en_stopwords=set(stopwords.words('english'))\n",
							"    ps=PorterStemmer()\n",
							"\n",
							"    clean=[getCleanedText(j) for j in training_set]  \n",
							"    test_clean=[getCleanedText(j) for j in test_set]\n",
							"\n",
							"    cv=CountVectorizer(ngram_range=(1,2))  \n",
							"    clean_vect=cv.fit_transform(clean).toarray()  \n",
							"\n",
							"    #print(cv.get_feature_names_out())  \n",
							"    test_clean_vect=cv.transform(test_clean).toarray()\n",
							"\n",
							"    mlb=MultinomialNB()  \n",
							"    mlb.fit(clean_vect,training_set_res)  \n",
							"    pred=mlb.predict(test_clean_vect)\n",
							"\n",
							"    for count in range(0,len(sf_data)):\n",
							"        final_pred=pred[count].item()\n",
							"        if(rating_data[count]==0):\n",
							"            final_pred=pred[count].item()\n",
							"        elif(pred[count].item()==0):\n",
							"            final_pred=rating_data[count]\n",
							"        else:\n",
							"            if(rating_data[count]!=pred[count].item()):\n",
							"                final_pred=0\n",
							"        res.append([sf_data[count][0],final_pred])\n",
							"\n",
							"    spark = SparkSession.builder.appName('sparkdf').getOrCreate() \n",
							"    df_res= spark.createDataFrame(res, [\"Id\",\"Sentiment_Score\"])\n",
							"    df_res=df_res.toPandas() \n",
							"    df_res.to_parquet(\"abfss://fantasticfourfilesystem@fantasticfouraccount.dfs.core.windows.net/synoutput/SentimentAnalysisScore.parquet\")\n",
							"    \n",
							"else:\n",
							"    df_res=pd.DataFrame(columns = ['Id', 'Sentiment_Score'])\n",
							"    df_res.to_parquet(\"abfss://fantasticfourfilesystem@fantasticfouraccount.dfs.core.windows.net/synoutput/SentimentAnalysisScore.parquet\")"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nbk_sentimentAnalysis_Test')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "ffSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "f2b86f34-cd5d-470d-a097-4d3e8e584713"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/23731aa3-4b0a-4570-b586-3428fd40a659/resourceGroups/FantasticFour/providers/Microsoft.Synapse/workspaces/fantasticfoursynapse/bigDataPools/ffSparkPool",
						"name": "ffSparkPool",
						"type": "Spark",
						"endpoint": "https://fantasticfoursynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ffSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\n",
							"df = spark.read.load('abfss://fantasticfourfilesystem@fantasticfouraccount.dfs.core.windows.net/sfinput/Feedback_Collector__c.parquet', format='parquet')\n",
							"df.createOrReplaceTempView(\"SF_Src\")"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\n",
							"--Select * FROM SF_Src\n",
							"Select Id, Case when RIGHT(id,1) IN ('Q','E','Y','M') THEN 1 When RIGHT(id,1) IN ('U','C','A','G') THEN -1 ELSE 0 END AS Sentiment_Score FROM SF_Src"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\n",
							"--Select * FROM SF_Src\n",
							"Select distinct RIGHT(id,1) FROM SF_Src"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\n",
							"df1 = spark.sql(\"Select Id, Case when RIGHT(id,1) IN ('Q','E','Y','M') THEN 1 When RIGHT(id,1) IN ('U','C','A','G') THEN -1 ELSE 0 END AS Sentiment_Score FROM SF_Src\")\n",
							"df1.coalesce(1).write.parquet('abfss://fantasticfourfilesystem@fantasticfouraccount.dfs.core.windows.net/sfinput/TestFeedbackScore.parquet')"
						],
						"outputs": [],
						"execution_count": 7
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ffSparkPool')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 5,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.3",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		}
	]
}